{"map":"{\"version\":3,\"sources\":[\"/Users/serenazhang/Desktop/html/robofriends/src/Card.js\",\"/Users/serenazhang/Desktop/html/robofriends/src/CardList.js\",\"/Users/serenazhang/Desktop/html/robofriends/src/SearchBox.js\",\"/Users/serenazhang/Desktop/html/robofriends/src/Scroll.js\",\"/Users/serenazhang/Desktop/html/robofriends/src/App.js\",\"/Users/serenazhang/Desktop/html/robofriends/src/serviceWorker.js\",\"/Users/serenazhang/Desktop/html/robofriends/src/index.js\"],\"names\":[\"Card\",\"_ref\",\"name\",\"email\",\"id\",\"react_default\",\"a\",\"createElement\",\"className\",\"alt\",\"src\",\"concat\",\"CardList\",\"robots\",\"cardsArray\",\"map\",\"user\",\"i\",\"src_Card\",\"key\",\"SearchBox\",\"searchChange\",\"type\",\"placeholder\",\"onChange\",\"Scroll\",\"props\",\"style\",\"overflowY\",\"border\",\"height\",\"children\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"onSearchChange\",\"event\",\"setState\",\"searchfield\",\"target\",\"value\",\"state\",\"_this2\",\"fetch\",\"then\",\"response\",\"json\",\"users\",\"_this3\",\"filteredRobots\",\"filter\",\"robot\",\"toLowerCase\",\"includes\",\"src_SearchBox\",\"src_Scroll\",\"src_CardList\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"yNAceA,EAZF,SAAAC,GAA0B,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GAC1B,OACIC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,mBACrBC,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAAA,KAAA,KAAKL,GACLG,EAAAC,EAAAC,cAAA,IAAA,KAAIJ,MCYLS,EAjBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OACVC,EAAaD,EAAOE,IAAI,SAACC,EAAMC,GACjC,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKF,EACLb,GAAIS,EAAOI,GAAGb,GACdF,KAAMW,EAAOI,GAAGf,KAChBC,MAAOU,EAAOI,GAAGd,UAG7B,OACIE,EAAAC,EAAAC,cAAA,MAAA,KACKO,ICDEM,EAZG,SAAAnB,GAAsB,IAAnBoB,EAAmBpB,EAAnBoB,aACjB,OACIhB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,QAAA,CAAOC,UAAU,4BACbc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCMXI,EAZA,SAACC,GACZ,OACIrB,EAAAC,EAAAC,cAAA,MAAA,CAAKoB,MAAO,CACRC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAEPJ,EAAMK,WCgCJC,qBAlCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1CZ,EAAKa,MAAQ,CACTjC,OAAQ,GACR8B,YAAa,IAJPV,mFAQM,IAAAc,EAAAX,KAChBY,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAE7B,OAAQuC,uCAOtC,IAAAC,EAAAjB,KACCkB,EAAiBlB,KAAKU,MAAMjC,OAAO0C,OAAO,SAAAC,GAC5C,OAAOA,EAAMtD,KAAKuD,cAAcC,SAASL,EAAKP,MAAMH,YAAYc,iBAEpE,OACIpD,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWtC,aAAce,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAQyC,aA5BpBQ,EAAAA,YCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,EAAAA,EAASC,OACLhE,EAAAC,EAAAC,cAAC+D,EAAD,MACEC,SAASC,eAAe,SDwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\n\\nconst Card = ( { name, email, id }) => {\\n    return (\\n        <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-S'>\\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\\n            <div>\\n                <h2>{name}</h2>\\n                <p>{email}</p>\\n            </div>\\n        </div>\\n    )\\n}\\n\\nexport default Card;\",\"import React from 'react';\\nimport Card from './Card';\\n\\nconst CardList = ({ robots }) => {\\n    const cardsArray = robots.map((user, i) => {\\n        return (\\n            <Card\\n                key={i}\\n                id={robots[i].id}\\n                name={robots[i].name}\\n                email={robots[i].email}\\n            />);\\n    })\\n    return (\\n        <div>\\n            {cardsArray}\\n        </div>\\n    )\\n}\\n\\nexport default CardList;\",\"import React from 'react';\\n\\nconst SearchBox = ({ searchChange }) => {\\n    return (\\n        <div className=\\\"\\\">\\n            <input className=\\\"pa2 bw2 b--light-blue br2\\\"\\n                type=\\\"search\\\"\\n                placeholder=\\\"search robots\\\"\\n                onChange={searchChange} />\\n            {/* 每次onChange, call searchChange function */}\\n        </div>\\n    );\\n}\\n\\nexport default SearchBox;\",\"import React from 'react';\\n\\nconst Scroll = (props) => {\\n    return (\\n        <div style={{\\n            overflowY: 'scroll',\\n            border: '1px solid black',\\n            height: '350px'\\n        }}>\\n            {props.children}\\n        </div>\\n    )\\n}\\n\\nexport default Scroll;\",\"import React, { Component } from 'react';\\nimport CardList from './CardList';\\nimport SearchBox from './SearchBox';\\nimport Scroll from './Scroll';\\nimport './App.css';\\n\\nclass App extends Component {\\n    constructor() {\\n        super()\\n        this.state = {\\n            robots: [],\\n            searchfield: ''\\n        }\\n    }\\n\\n    componentDidMount() {\\n        fetch('https://jsonplaceholder.typicode.com/users')\\n            .then(response => response.json())\\n            .then(users => this.setState({ robots: users }))\\n            ;\\n    }\\n\\n    onSearchChange = (event) => {\\n        this.setState({ searchfield: event.target.value })\\n    }\\n    render() {\\n        const filteredRobots = this.state.robots.filter(robot => {\\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\\n        });\\n        return (\\n            <div className=\\\"tc\\\" >\\n                <h1 className='h2'>RoboFriends</h1>\\n                <SearchBox searchChange={this.onSearchChange} />\\n                <Scroll>\\n                    <CardList robots={filteredRobots} />\\n                </Scroll>\\n            </div>\\n        );\\n    }\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\nimport \\\"tachyons\\\";\\n\\nReactDOM.render(\\n    <App />\\n    , document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,n){},15:function(e,t,n){},17:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(2),c=n.n(o),i=(n(14),n(3)),l=n(4),s=n(6),u=n(5),h=n(7),m=function(e){var t=e.name,n=e.email,a=e.id;return r.a.createElement(\"div\",{className:\"bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-S\"},r.a.createElement(\"img\",{alt:\"robots\",src:\"https://robohash.org/\".concat(a,\"?size=200x200\")}),r.a.createElement(\"div\",null,r.a.createElement(\"h2\",null,t),r.a.createElement(\"p\",null,n)))},d=function(e){var t=e.robots,n=t.map(function(e,n){return r.a.createElement(m,{key:n,id:t[n].id,name:t[n].name,email:t[n].email})});return r.a.createElement(\"div\",null,n)},b=function(e){var t=e.searchChange;return r.a.createElement(\"div\",{className:\"\"},r.a.createElement(\"input\",{className:\"pa2 bw2 b--light-blue br2\",type:\"search\",placeholder:\"search robots\",onChange:t}))},f=function(e){return r.a.createElement(\"div\",{style:{overflowY:\"scroll\",border:\"1px solid black\",height:\"350px\"}},e.children)},p=(n(15),function(e){function t(){var e;return Object(i.a)(this,t),(e=Object(s.a)(this,Object(u.a)(t).call(this))).onSearchChange=function(t){e.setState({searchfield:t.target.value})},e.state={robots:[],searchfield:\"\"},e}return Object(h.a)(t,e),Object(l.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(e){return e.json()}).then(function(t){return e.setState({robots:t})})}},{key:\"render\",value:function(){var e=this,t=this.state.robots.filter(function(t){return t.name.toLowerCase().includes(e.state.searchfield.toLowerCase())});return r.a.createElement(\"div\",{className:\"tc\"},r.a.createElement(\"h1\",{className:\"h2\"},\"RoboFriends\"),r.a.createElement(b,{searchChange:this.onSearchChange}),r.a.createElement(f,null,r.a.createElement(d,{robots:t})))}}]),t}(a.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(16);c.a.render(r.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,t,n){e.exports=n(17)}},[[8,1,2]]]);","extractedComments":[]}